<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>