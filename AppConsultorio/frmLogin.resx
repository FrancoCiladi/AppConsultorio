<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>