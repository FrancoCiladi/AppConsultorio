<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>